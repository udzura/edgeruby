#![allow(unused_variables)]
#![allow(non_snake_case)]
extern crate mrubyedge;

use std::rc::Rc;
use std::cell::RefCell;
use std::any::Any;

use mrubyedge::yamrb::value::*;

const DATA: &'static [u8] = include_bytes!("./{{ file_basename }}.mrb");
const MEMORY_INDEX: u32 = 0;
const PAGE_SIZE: usize = 65536; // 64KB

#[cfg(target_arch = "wasm32")]
#[no_mangle]
pub unsafe fn __mrbe_grow(num_pages: usize) -> *const u8 {
    use core::arch::wasm32;
    let num_pages = wasm32::memory_grow(MEMORY_INDEX, num_pages);
    if num_pages == usize::max_value() {
        return usize::max_value() as *const u8;
    }
    let ptr = (num_pages * PAGE_SIZE) as *const u8;
    ptr
}

extern "C" {
{% for fn in ftypes_imports %}
    fn {{ fn.func_name }}({{ fn.args_decl }}) {{ fn.rettype_decl }};
{% endfor %}
}

{% for fn in ftypes_imports %}
{{ fn.import_helper_var }}
fn __imported_c_{{ fn.func_name }}<'insn>(_vm: &mut VM<'insn>, _self: &RObject, args: &[Rc<RObject>]) -> Rc<RObject> {
{{ fn.imported_body }}
}
{% endfor %}

{% for fn in ftypes %}

{{ fn.exported_helper_var }}
#[no_mangle]
pub fn {{ fn.func_name }}({{ fn.args_decl }}) {{ fn.rettype_decl }} {
    let mut rite = mrubyedge::rite::load(DATA).unwrap();
    let mut vm = mrubyedge::yamrb::vm::VM::open(&mut rite);
    vm.run().unwrap();

{% set index = 1 %}
{% for ifn in ftypes_imports %}
    let klass = mrb_helper::mrb_get_target_class(&mut vm);
    let method = RMethod {
        sym_id: 1000000 + {{ index }},
        body: mrubyedge::vm::Method::CMethod(__imported_c_{{ ifn.func_name }}),
    };
    mrb_helper::mrb_define_method(&mut vm, klass, "{{ ifn.func_name }}", method);
{% set index = index + 1 %}
{% endfor %}

    {{ fn.str_args_converter }}

    let args = {{ fn.args_let_vec }};
    let retval: Result<Rc<RObject>, mrubyedge::Error> = 
        mrubyedge::yamrb::helpers::mrb_funcall(
            &mut vm,
            None,
            "{{ fn.func_name }}".to_string(),
            &args);

    match &retval {
        Ok(retval) => {
	    {{ fn.handle_retval }}
        }
        Err(ex) => {
            dbg!(ex);
            panic!("mruby error");
        }
    }
}
{% endfor %}