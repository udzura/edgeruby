extern crate mrubyedge;

use mrubyedge::{mrb_helper, vm::RObject};

const DATA: &'static [u8] = include_bytes!("./{{ file_basename }}.mrb");

{% for fn in ftypes %}

#[no_mangle]
pub fn {{ fn.func_name }}({{ fn.args_decl }}) {{ fn.rettype_decl }} {
    let rite = mrubyedge::rite::load(DATA).unwrap();
    let mut vm = mrubyedge::vm::VM::open(rite);
    vm.prelude().unwrap();
    vm.eval_insn().unwrap();

    let objclass_sym = vm.target_class.unwrap() as usize;
    let top_self = RObject::RInstance {
        class_index: objclass_sym,
    };
    let args = {{ fn.args_let_vec }};
    let retval = mrb_helper::mrb_funcall(&mut vm, &top_self, "{{ fn.func_name }}".to_string(), &args);

    match &retval {
        Ok(retval) => {
            eprintln!("{:?}", retval);
        }
        Err(ex) => {
            dbg!(ex);
            panic!("mruby error");
        }
    };

    retval.unwrap().as_ref().cloned().try_into().unwrap()
}

{% endfor %}
