extern crate mrubyedge;

use mrubyedge::{
    mrb_helper,
    vm::VM,
    vm::{RMethod, RObject},
};

use std::rc::Rc;

const DATA: &'static [u8] = include_bytes!("./{{ file_basename }}.mrb");
const MEMORY_INDEX: u32 = 0;
const PAGE_SIZE: usize = 65536; // 64KB

#[cfg(target_arch = "wasm32")]
#[no_mangle]
pub unsafe fn __mrbe_grow(num_pages: usize) -> *const u8 {
    use core::arch::wasm32;
    let num_pages = wasm32::memory_grow(MEMORY_INDEX, num_pages);
    if num_pages == usize::max_value() {
        return usize::max_value() as *const u8;
    }
    let ptr = (num_pages * PAGE_SIZE) as *const u8;
    ptr
}

extern "C" {
{% for fn in ftypes_imports %}
    fn {{ fn.func_name }}({{ fn.args_decl }}) {{ fn.rettype_decl }};
{% endfor %}
}

{% for fn in ftypes_imports %}
fn __imported_c_{{ fn.func_name }}<'insn>(_vm: &mut VM<'insn>, args: &[Rc<RObject>]) -> Rc<RObject> {
{{ fn.imoprted_body }}
}
{% endfor %}

{% for fn in ftypes %}

#[no_mangle]
pub fn {{ fn.func_name }}({{ fn.args_decl }}) {{ fn.rettype_decl }} {
    let rite = mrubyedge::rite::load(DATA).unwrap();
    let mut vm = mrubyedge::vm::VM::open(rite);
    vm.prelude().unwrap();
    vm.eval_insn().unwrap();

    let objclass_sym = vm.target_class.unwrap() as usize;
    let top_self = RObject::RInstance {
        class_index: objclass_sym,
    };

{% set index = 1 %}
{% for ifn in ftypes_imports %}
    let klass = mrb_helper::mrb_get_target_class(&mut vm);
    let method = RMethod {
        sym_id: 1000000 + {{ index }},
        body: mrubyedge::vm::Method::CMethod(__imported_c_{{ ifn.func_name }}),
    };
    mrb_helper::mrb_define_method(&mut vm, klass, "{{ ifn.func_name }}", method);
{% set index = index + 1 %}
{% endfor %}

    {{ fn.str_args_converter }}

    let args = {{ fn.args_let_vec }};
    let retval = mrb_helper::mrb_funcall(&mut vm, &top_self, "{{ fn.func_name }}".to_string(), &args);

    match &retval {
        Ok(retval) => {
	    retval.as_ref().try_into().unwrap()
        }
        Err(ex) => {
            dbg!(ex);
            panic!("mruby error");
        }
    }
}
{% endfor %}